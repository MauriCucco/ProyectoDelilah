swagger: "2.0"
info:
  description: "Documentación de la API REST de Delilah Restó."
  version: "1.0.0"
  title: "Delilah Restó"
  contact:
    email: "delilahdev@gmail.com"
host: "delilah.resto.com.ar"
tags:
- name: "cliente"
  description: "Operaciones relacionadas con los clientes"
- name: "pedido"
  description: "Acceso a la informacion de los pedidos"
- name: "plato"
  description: "Información sobre los platos ofrecidos"  
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
schemes:
- "https"
- "http"
paths:
  /plato:
    get:
      tags:
      - "plato"
      summary: "Devuelve todos los platos del menú"
      description: "Devuelve un listado con la información de la totalidad de los platos que Delilah Restó ofrece al público."
      operationId: "obtenerPlatos"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/GetListaPlatos"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
      - bearerAuth: []
    post:
      tags:
      - "plato"
      summary: "Subir nuevo plato"
      description: "Agrega un nuevo plato a la base de datos"
      operationId: "subirPlato"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Objeto plato"
          required: true
          schema:
            $ref: "#/definitions/Plato"
      responses:
        200:
          description: "Operacion exitosa"
          schema:
            $ref: "#/definitions/Exito"
        400:
          description: "Falta información del plato"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Exito"
      security:
        - bearerAuth: []
  /plato/{IdPlato}:
    get:
      tags:
      - "plato"
      summary: "Encuentra un plato por ID"
      description: "Devuelve un determinado plato con toda su información."
      operationId: "obtenerPlatoPorId"
      produces:
      - "application/json"
      parameters:
      - name: "IdPlato"
        in: "path"
        description: "ID del plato buscado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/Plato"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Plato no encontrado"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
      - bearerAuth: []
    put:
      tags:
      - "plato"
      summary: "Actualizar un plato"
      description: "Actualiza el nombre, el precio y/o el estado de un plato existente del menú."
      operationId: "actualizarPlato"
      produces:
      - "application/json"
      parameters:
      - name: "IdPlato"
        in: "path"
        description: "ID del plato buscado"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Objeto plato"
        required: true
        schema:
          $ref: "#/definitions/Plato"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/Exito"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Plato no encontrado"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
  /pedido:
    post:
      tags:
      - "pedido"
      summary: "Subir un pedido"
      description: "Se sube el pedido de un cliente con los platos/comidas requeridos."
      operationId: "subirPedido"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto con la información del pedido de un determinado cliente"
        required: true
        schema:
          $ref: "#/definitions/PedidoSinID"
      responses:
        200:
          description: "Operacion exitosa"
          schema:
            $ref: "#/definitions/Exito"
        400:
          description: "Falta información en el pedido"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Exito"
      security:
        - bearerAuth: []
  /pedido/estado/{IdPedido}:
    get:
      tags:
      - "pedido"
      summary: "Devuelve el estado de un pedido"
      description: "Se obtiene el estado de un pedido desde la sección de administración. El pedido puede ser/estar: nuevo, en preparación, en camino, entregado o cancelado"
      operationId: "obtenerEstado"
      produces:
      - "application/json"
      parameters:
      - name: "IdPedido"
        in: "path"
        description: "ID del pedido"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/EstadoPedido"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Pedido no encontrado"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
    put:
      tags:
      - "pedido"
      summary: "Actualiza el estado de un pedido"
      description: "Actualiza el pedido a alguno de los siguientes estados: nuevo, en preparación, en camino, entregado o cancelado"
      operationId: "actualizarPedido"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "IdPedido"
        in: "path"
        description: "ID del pedido"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Objeto con el estado nuevo del pedido"
        required: true
        schema:
          $ref: "#/definitions/EstadoPedido"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/Exito"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Pedido no encontrado"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
  /pedido/favoritos/{IdCliente}:
    get:
      tags:
      - "pedido"
      summary: "Platos favoritos"
      description: "Devuelve una lista de platos previamente pedidos por un determinada cliente"
      operationId: "obtenerPedidosUsuario"
      produces:
      - "application/json"
      parameters:
      - name: "IdCliente"
        in: "path"
        description: "ID del cliente"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/ListaPlatos"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "El cliente no realizó pedidos"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
  /pedido/{IdPedido}:
    get:
      tags:
      - "pedido"
      summary: "Devuelve un pedido determinado"
      description: "Devuelve el contenido y la descripción de un determinado pedido"
      operationId: "obtenerPedidoPorId"
      produces:
      - "application/json"
      parameters:
      - name: "IdPedido"
        in: "path"
        description: "ID del pedido buscado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/GetExitosoPedido"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Pedido no encontrado"
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: "Error del servidor"
          schema:
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
  /cliente/{IdCliente}:
    get:
      tags:
      - "cliente"
      summary: "Obtener cliente por su ID"
      operationId: "obtenerCliente"
      produces:
      - "application/json"
      parameters:
      - name: "IdCliente"
        in: "path"
        description: "ID del cliente buscado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/GetExitosoCliente"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Cliente no encontrado"
          schema:
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
    put:
      tags:
      - "cliente"
      summary: "Actualizar estado cliente por su ID"
      description: "Permite la actualización del estado de un cliente entre activo o eliminado"
      operationId: "actualizarCliente"
      produces:
      - "application/json"
      parameters:
      - name: "IdCliente"
        in: "path"
        description: "ID del cliente buscado"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Objeto con el estado del cliente"
        required: true
        schema:
          $ref: "#/definitions/EstadoCliente"
      responses: 
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/Exito"
        400:
          description: "ID inválido"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Cliente no encontrado"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema: 
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
  /cliente/registro:
    post:
      tags:
      - "cliente"
      summary: "Crear un cliente nuevo"
      description: "Si el cliente no se encuentra previamente registrado, debe ingresar por única vez: username, nombre completo, email, telefono, direccion y password."
      operationId: "crearCliente"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto cliente creado"
        required: true
        schema:
          $ref: "#/definitions/Cliente"
      responses:
        200:
          description: "Registro exitoso"
          schema: 
            $ref: "#/definitions/Exito"
        409:
          description: "El usuario ya se encuentra registrado"
          schema: 
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema: 
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
  /cliente/login:
    post:
      tags:
      - "cliente"
      summary: "Loguea al cliente"
      description: "El cleinte registrado debe loguearse ingresando username o email y password. Si la operación es exitosa, le será devuelto un token de autorización para próximas operaciones."
      operationId: "loginCliente"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto con los datos de logueo del cliente"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/LogInExitoso"
        404:
          description: "Usuario y/o contraseña invalido"
          schema: 
            $ref: "#/definitions/Error"
        500:
          description: "Error del servidor"
          schema: 
            $ref: "#/definitions/Error"
      security:
        - bearerAuth: []
definitions:
  Login:
    type: "object"
    properties:
      username_o_email:
        type: "string"
        description: "Username o email"
      password: 
        type: "string"
  Cliente:
    type: "object"
    properties:
      username:
        type: "string"
      nombre_completo:
        type: "string"
      email:
        type: "string"
      telefono:
        type: "string"
      direccion:
        type: "string"
      password:
        type: "string"
        format: "password"
  UsuarioPublico:
    type: "object"
    properties:
      username:
        type: "string"
      nombre_completo:
        type: "string"
      email:
        type: "string"
      telefono:
        type: "string"
      direccion:
        type: "string"
  PedidoConID:
    type: "object"
    properties:
      id_pedido: 
        type: "integer"
      id_usuario: 
        type: "integer"
      id_platos:
        type: "array"
        items: 
          type: "integer"
      cantidad:
        type: "array"
        items:
          type: "integer"
      fecha:
        type: "string"
        format: "date-time"
      tipo_pago:
        type: "string"
        description: "Tipos de pago disponbles"
        enum:
        - "efectivo"
        - "debito"
        - "credito"
      total:
        type: "number"
      estado:
        type: "string"
        description: "Estado del pedido"
        enum:
        - "nuevo"
        - "en preparación"
        - "en camino"
        - "entregado"
        - "cancelado"
  PedidoSinID:
    type: "object"
    properties:
      id_usuario: 
        type: "integer"
      id_platos:
        type: "array"
        items: 
          type: "integer"
      cantidad:
        type: "array"
        items:
          type: "integer"
      fecha:
        type: "string"
        format: "date-time"
      tipo_pago:
        type: "string"
        description: "Tipos de pago disponbles"
        enum:
        - "efectivo"
        - "debito"
        - "credito"
      total:
        type: "number"
      estado:
        type: "string"
        description: "Estado del pedido"
        enum:
        - "nuevo"
        - "en preparación"
        - "en camino"
        - "entregado"
        - "cancelado"
  Plato:
    type: "object"
    properties:
      nombre:
        type: "string"
      precio:
        type: "number"
      estado:
        type: "string"
        description: "Estado del plato"
        enum:
        - "activo"
        - "discontinuado"
  GetListaPlatos:
    type: "object"
    properties:
      error:
        type: "boolean"
      codigo:
        type: "number"
      mensaje:
        type: "string"
      respuesta:
        $ref: "#/definitions/ListaPlatos"
  GetExitosoPedido:
    type: "object"
    properties:
      error:
        type: "boolean"
      codigo:
        type: "number"
      mensaje:
        type: "string"
      respuesta:
        $ref: "#/definitions/RespuestaPedidoConID"
  GetExitosoCliente:
    type: "object"
    properties:
      error:
        type: "boolean"
      codigo:
        type: "number"
      mensaje:
        type: "string"
      respuesta:
        $ref: "#/definitions/UsuarioPublico"
  LogInExitoso:
    type: "object"
    properties:
      error:
        type: "boolean"
      codigo:
        type: "number"
      mensaje:
        type: "string"
      respuesta:
        $ref: "#/definitions/Token"
  Token:
    type: "object"
    properties:
      token: 
        type: "string"
      administrador: 
        type: "boolean"
  ListaPlatos:
    type: "array"
    items:
      $ref: "#/definitions/Plato"
  RespuestaPedidoConID:
    type: "array"
    items:
      $ref: "#/definitions/PedidoConID"
  Error:
    type: "object"
    properties:
      error:
        type: "boolean"
      codigo:
        type: "number"
      mensaje:
        type: "string"
  Exito:
    type: "object"
    properties:
      error:
        type: "boolean"
      codigo:
        type: "number"
      mensaje:
        type: "string"
  EstadoPedido:
    type: "object"
    properties:
      id_pedido:
        type: "integer"
      id_usuario:
        type: "integer"
      estado:
        type: "string"
  EstadoCliente:
    type: "object"
    properties:
      estado: 
        type: "string"
        description: "Estado del cliente"
        enum:
        - "activo"
        - "eliminado"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"